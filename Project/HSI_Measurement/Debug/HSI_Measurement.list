
HSI_Measurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000148  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000394  0800039c  0000139c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000394  08000394  0000139c  2**0
                  CONTENTS
  4 .ARM          00000000  08000394  08000394  0000139c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000394  0800039c  0000139c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000394  08000394  00001394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000398  08000398  00001398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000139c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800039c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800039c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000101  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000098  00000000  00000000  000014cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00001568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000002c  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f82  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000004a3  00000000  00000000  0000255e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003d24  00000000  00000000  00002a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00006725  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00006768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d1  00000000  00000000  000067c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000000 	.word	0x20000000
 8000268:	00000000 	.word	0x00000000
 800026c:	0800037c 	.word	0x0800037c

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000004 	.word	0x20000004
 8000288:	0800037c 	.word	0x0800037c

0800028c <main>:
#define RCC_CFGR_REG_ADDRESS	(RCC_BASE_ADDRESS + RCC_CFGR_REG_OFFSET)

#define GPIOA_BASE_ADDRESS		0x40020000UL

int main(void)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
	// 1. Configure the RCC_CFGR register
	uint32_t *pRccCfgrReg = (uint32_t*)RCC_CFGR_REG_ADDRESS;
 8000292:	4b10      	ldr	r3, [pc, #64]	@ (80002d4 <main+0x48>)
 8000294:	60fb      	str	r3, [r7, #12]

	*pRccCfgrReg = (0 << 21);	// clear bit 21
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
	*pRccCfgrReg = (0 << 22);	// clear bit 22
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]

	// Configure MCO1 prescaler
	*pRccCfgrReg |= (1 << 24);
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	601a      	str	r2, [r3, #0]
	*pRccCfgrReg &= (0 << 25);
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
	*pRccCfgrReg &= (0 << 26);
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]

	// 2. Configure PA8 to AF0 mode to behave as MCO1 signal
	// a) Enable the peripheral clock for GPIOA peripheral
	uint32_t *pRccAhb1Enr = (uint32_t*)(RCC_BASE_ADDRESS + 0x30);
 80002ba:	4b07      	ldr	r3, [pc, #28]	@ (80002d8 <main+0x4c>)
 80002bc:	60bb      	str	r3, [r7, #8]
	*pRccAhb1Enr |= (1 << 0);	// Enable GPIOA peripheral clock
 80002be:	68bb      	ldr	r3, [r7, #8]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f043 0201 	orr.w	r2, r3, #1
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	601a      	str	r2, [r3, #0]

	// b) Configure the mode of GPIOA pin 8 as alternate function mode
	uint32_t *pGPIOAModeReg = (uint32_t*)(GPIOA_BASE_ADDRESS + 0x00);
 80002ca:	4b04      	ldr	r3, [pc, #16]	@ (80002dc <main+0x50>)
 80002cc:	607b      	str	r3, [r7, #4]



    /* Loop forever */
	for(;;);
 80002ce:	bf00      	nop
 80002d0:	e7fd      	b.n	80002ce <main+0x42>
 80002d2:	bf00      	nop
 80002d4:	40023808 	.word	0x40023808
 80002d8:	40023830 	.word	0x40023830
 80002dc:	40020000 	.word	0x40020000

080002e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e0:	480d      	ldr	r0, [pc, #52]	@ (8000318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e8:	480c      	ldr	r0, [pc, #48]	@ (800031c <LoopForever+0x6>)
  ldr r1, =_edata
 80002ea:	490d      	ldr	r1, [pc, #52]	@ (8000320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000324 <LoopForever+0xe>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f0:	e002      	b.n	80002f8 <LoopCopyDataInit>

080002f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f6:	3304      	adds	r3, #4

080002f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002fc:	d3f9      	bcc.n	80002f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000328 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000300:	4c0a      	ldr	r4, [pc, #40]	@ (800032c <LoopForever+0x16>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000304:	e001      	b.n	800030a <LoopFillZerobss>

08000306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000308:	3204      	adds	r2, #4

0800030a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800030c:	d3fb      	bcc.n	8000306 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800030e:	f000 f811 	bl	8000334 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000312:	f7ff ffbb 	bl	800028c <main>

08000316 <LoopForever>:

LoopForever:
  b LoopForever
 8000316:	e7fe      	b.n	8000316 <LoopForever>
  ldr   r0, =_estack
 8000318:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800031c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000320:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000324:	0800039c 	.word	0x0800039c
  ldr r2, =_sbss
 8000328:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800032c:	2000001c 	.word	0x2000001c

08000330 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000330:	e7fe      	b.n	8000330 <ADC1_IRQHandler>
	...

08000334 <__libc_init_array>:
 8000334:	b570      	push	{r4, r5, r6, lr}
 8000336:	4d0d      	ldr	r5, [pc, #52]	@ (800036c <__libc_init_array+0x38>)
 8000338:	2600      	movs	r6, #0
 800033a:	4c0d      	ldr	r4, [pc, #52]	@ (8000370 <__libc_init_array+0x3c>)
 800033c:	1b64      	subs	r4, r4, r5
 800033e:	10a4      	asrs	r4, r4, #2
 8000340:	42a6      	cmp	r6, r4
 8000342:	d109      	bne.n	8000358 <__libc_init_array+0x24>
 8000344:	4d0b      	ldr	r5, [pc, #44]	@ (8000374 <__libc_init_array+0x40>)
 8000346:	2600      	movs	r6, #0
 8000348:	4c0b      	ldr	r4, [pc, #44]	@ (8000378 <__libc_init_array+0x44>)
 800034a:	f000 f817 	bl	800037c <_init>
 800034e:	1b64      	subs	r4, r4, r5
 8000350:	10a4      	asrs	r4, r4, #2
 8000352:	42a6      	cmp	r6, r4
 8000354:	d105      	bne.n	8000362 <__libc_init_array+0x2e>
 8000356:	bd70      	pop	{r4, r5, r6, pc}
 8000358:	f855 3b04 	ldr.w	r3, [r5], #4
 800035c:	3601      	adds	r6, #1
 800035e:	4798      	blx	r3
 8000360:	e7ee      	b.n	8000340 <__libc_init_array+0xc>
 8000362:	f855 3b04 	ldr.w	r3, [r5], #4
 8000366:	3601      	adds	r6, #1
 8000368:	4798      	blx	r3
 800036a:	e7f2      	b.n	8000352 <__libc_init_array+0x1e>
 800036c:	08000394 	.word	0x08000394
 8000370:	08000394 	.word	0x08000394
 8000374:	08000394 	.word	0x08000394
 8000378:	08000398 	.word	0x08000398

0800037c <_init>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	bf00      	nop
 8000380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000382:	bc08      	pop	{r3}
 8000384:	469e      	mov	lr, r3
 8000386:	4770      	bx	lr

08000388 <_fini>:
 8000388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038a:	bf00      	nop
 800038c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038e:	bc08      	pop	{r3}
 8000390:	469e      	mov	lr, r3
 8000392:	4770      	bx	lr
