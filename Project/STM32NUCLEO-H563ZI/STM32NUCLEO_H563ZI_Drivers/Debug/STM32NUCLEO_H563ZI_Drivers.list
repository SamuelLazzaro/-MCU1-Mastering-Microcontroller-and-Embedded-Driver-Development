
STM32NUCLEO_H563ZI_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a8c  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cd8  08000ce0  00001ce0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cd8  08000cd8  00001ce0  2**0
                  CONTENTS
  4 .ARM          00000000  08000cd8  08000cd8  00001ce0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cd8  08000ce0  00001ce0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cd8  08000cd8  00001cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000cdc  08000cdc  00001cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001ce0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000ce0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000ce0  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001ce0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000cbc  00000000  00000000  00001d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002b9  00000000  00000000  000029cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  00002c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000008d  00000000  00000000  00002d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001ac5  00000000  00000000  00002ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000010e4  00000000  00000000  000048a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000652d  00000000  00000000  00005986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000beb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000268  00000000  00000000  0000bef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ef  00000000  00000000  0000c160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000000 	.word	0x20000000
 8000268:	00000000 	.word	0x00000000
 800026c:	08000cc0 	.word	0x08000cc0

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000004 	.word	0x20000004
 8000288:	08000cc0 	.word	0x08000cc0

0800028c <GPIO_init>:
*
*
* @Author  {slazzaro},  @date  {14/12/2024}
******************************************************************************/
void GPIO_init(GPIO_Handle_t *pGPIOHandle)
{
 800028c:	b480      	push	{r7}
 800028e:	b087      	sub	sp, #28
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	617b      	str	r3, [r7, #20]

	// 1. Configure the mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	795b      	ldrb	r3, [r3, #5]
 800029c:	2b03      	cmp	r3, #3
 800029e:	d822      	bhi.n	80002e6 <GPIO_init+0x5a>
	{
		// It is NOT an interrupt mode
		// Calculate value to use in order to set a GPIO pin mode for a specific pin of a GPIOx port
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	795b      	ldrb	r3, [r3, #5]
 80002a4:	461a      	mov	r2, r3
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	791b      	ldrb	r3, [r3, #4]
 80002aa:	005b      	lsls	r3, r3, #1
 80002ac:	fa02 f303 	lsl.w	r3, r2, r3
 80002b0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));		// Clearing bit values: 0x3 = 11 -> ~(0x3) = 00
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	791b      	ldrb	r3, [r3, #4]
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	2103      	movs	r1, #3
 80002c0:	fa01 f303 	lsl.w	r3, r1, r3
 80002c4:	43db      	mvns	r3, r3
 80002c6:	4619      	mov	r1, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	400a      	ands	r2, r1
 80002ce:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	6819      	ldr	r1, [r3, #0]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	697a      	ldr	r2, [r7, #20]
 80002dc:	430a      	orrs	r2, r1
 80002de:	601a      	str	r2, [r3, #0]
		temp = 0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	617b      	str	r3, [r7, #20]
 80002e4:	e0e0      	b.n	80004a8 <GPIO_init+0x21c>
	else
	{
		// Interrupt mode
//		EXTI->SECCFGR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	795b      	ldrb	r3, [r3, #5]
 80002ea:	2b04      	cmp	r3, #4
 80002ec:	d117      	bne.n	800031e <GPIO_init+0x92>
		{
			// 1. Configure the FTSR1 (Falling Trigger Selection Register 1)
			EXTI->FTSR1 |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80002ee:	4b4b      	ldr	r3, [pc, #300]	@ (800041c <GPIO_init+0x190>)
 80002f0:	685b      	ldr	r3, [r3, #4]
 80002f2:	687a      	ldr	r2, [r7, #4]
 80002f4:	7912      	ldrb	r2, [r2, #4]
 80002f6:	4611      	mov	r1, r2
 80002f8:	2201      	movs	r2, #1
 80002fa:	408a      	lsls	r2, r1
 80002fc:	4611      	mov	r1, r2
 80002fe:	4a47      	ldr	r2, [pc, #284]	@ (800041c <GPIO_init+0x190>)
 8000300:	430b      	orrs	r3, r1
 8000302:	6053      	str	r3, [r2, #4]
			// Clear the corresponding RTSR1 bit
			EXTI->RTSR1 &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000304:	4b45      	ldr	r3, [pc, #276]	@ (800041c <GPIO_init+0x190>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	7912      	ldrb	r2, [r2, #4]
 800030c:	4611      	mov	r1, r2
 800030e:	2201      	movs	r2, #1
 8000310:	408a      	lsls	r2, r1
 8000312:	43d2      	mvns	r2, r2
 8000314:	4611      	mov	r1, r2
 8000316:	4a41      	ldr	r2, [pc, #260]	@ (800041c <GPIO_init+0x190>)
 8000318:	400b      	ands	r3, r1
 800031a:	6013      	str	r3, [r2, #0]
 800031c:	e035      	b.n	800038a <GPIO_init+0xfe>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	795b      	ldrb	r3, [r3, #5]
 8000322:	2b05      	cmp	r3, #5
 8000324:	d117      	bne.n	8000356 <GPIO_init+0xca>
		{
			// 1. Configure the RTSR (Rising Trigger Selection Register)
			EXTI->RTSR1 |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000326:	4b3d      	ldr	r3, [pc, #244]	@ (800041c <GPIO_init+0x190>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	7912      	ldrb	r2, [r2, #4]
 800032e:	4611      	mov	r1, r2
 8000330:	2201      	movs	r2, #1
 8000332:	408a      	lsls	r2, r1
 8000334:	4611      	mov	r1, r2
 8000336:	4a39      	ldr	r2, [pc, #228]	@ (800041c <GPIO_init+0x190>)
 8000338:	430b      	orrs	r3, r1
 800033a:	6013      	str	r3, [r2, #0]
			// Clear the corresponding RTSR1 bit
			EXTI->FTSR1 &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800033c:	4b37      	ldr	r3, [pc, #220]	@ (800041c <GPIO_init+0x190>)
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	7912      	ldrb	r2, [r2, #4]
 8000344:	4611      	mov	r1, r2
 8000346:	2201      	movs	r2, #1
 8000348:	408a      	lsls	r2, r1
 800034a:	43d2      	mvns	r2, r2
 800034c:	4611      	mov	r1, r2
 800034e:	4a33      	ldr	r2, [pc, #204]	@ (800041c <GPIO_init+0x190>)
 8000350:	400b      	ands	r3, r1
 8000352:	6053      	str	r3, [r2, #4]
 8000354:	e019      	b.n	800038a <GPIO_init+0xfe>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	795b      	ldrb	r3, [r3, #5]
 800035a:	2b06      	cmp	r3, #6
 800035c:	d115      	bne.n	800038a <GPIO_init+0xfe>
		{
			// 1. Configure the FTSR and RTSR (Falling / Rising Trigger Selection Registers)
			EXTI->FTSR1 |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800035e:	4b2f      	ldr	r3, [pc, #188]	@ (800041c <GPIO_init+0x190>)
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	7912      	ldrb	r2, [r2, #4]
 8000366:	4611      	mov	r1, r2
 8000368:	2201      	movs	r2, #1
 800036a:	408a      	lsls	r2, r1
 800036c:	4611      	mov	r1, r2
 800036e:	4a2b      	ldr	r2, [pc, #172]	@ (800041c <GPIO_init+0x190>)
 8000370:	430b      	orrs	r3, r1
 8000372:	6053      	str	r3, [r2, #4]
			EXTI->RTSR1 |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000374:	4b29      	ldr	r3, [pc, #164]	@ (800041c <GPIO_init+0x190>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	7912      	ldrb	r2, [r2, #4]
 800037c:	4611      	mov	r1, r2
 800037e:	2201      	movs	r2, #1
 8000380:	408a      	lsls	r2, r1
 8000382:	4611      	mov	r1, r2
 8000384:	4a25      	ldr	r2, [pc, #148]	@ (800041c <GPIO_init+0x190>)
 8000386:	430b      	orrs	r3, r1
 8000388:	6013      	str	r3, [r2, #0]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t EXTI_CR_number = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	791b      	ldrb	r3, [r3, #4]
 800038e:	089b      	lsrs	r3, r3, #2
 8000390:	74fb      	strb	r3, [r7, #19]
		uint8_t EXTI_CR_bit_position = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	791b      	ldrb	r3, [r3, #4]
 8000396:	f003 0303 	and.w	r3, r3, #3
 800039a:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_BASE_ADDRESS_TO_CODE(pGPIOHandle->pGPIOx);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a1f      	ldr	r2, [pc, #124]	@ (8000420 <GPIO_init+0x194>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d04e      	beq.n	8000444 <GPIO_init+0x1b8>
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000424 <GPIO_init+0x198>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d032      	beq.n	8000416 <GPIO_init+0x18a>
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a1c      	ldr	r2, [pc, #112]	@ (8000428 <GPIO_init+0x19c>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d02b      	beq.n	8000412 <GPIO_init+0x186>
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4a1b      	ldr	r2, [pc, #108]	@ (800042c <GPIO_init+0x1a0>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d024      	beq.n	800040e <GPIO_init+0x182>
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a19      	ldr	r2, [pc, #100]	@ (8000430 <GPIO_init+0x1a4>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d01d      	beq.n	800040a <GPIO_init+0x17e>
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a18      	ldr	r2, [pc, #96]	@ (8000434 <GPIO_init+0x1a8>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d016      	beq.n	8000406 <GPIO_init+0x17a>
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a16      	ldr	r2, [pc, #88]	@ (8000438 <GPIO_init+0x1ac>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d00f      	beq.n	8000402 <GPIO_init+0x176>
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a15      	ldr	r2, [pc, #84]	@ (800043c <GPIO_init+0x1b0>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d008      	beq.n	80003fe <GPIO_init+0x172>
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a13      	ldr	r2, [pc, #76]	@ (8000440 <GPIO_init+0x1b4>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d101      	bne.n	80003fa <GPIO_init+0x16e>
 80003f6:	2308      	movs	r3, #8
 80003f8:	e025      	b.n	8000446 <GPIO_init+0x1ba>
 80003fa:	2300      	movs	r3, #0
 80003fc:	e023      	b.n	8000446 <GPIO_init+0x1ba>
 80003fe:	2307      	movs	r3, #7
 8000400:	e021      	b.n	8000446 <GPIO_init+0x1ba>
 8000402:	2306      	movs	r3, #6
 8000404:	e01f      	b.n	8000446 <GPIO_init+0x1ba>
 8000406:	2305      	movs	r3, #5
 8000408:	e01d      	b.n	8000446 <GPIO_init+0x1ba>
 800040a:	2304      	movs	r3, #4
 800040c:	e01b      	b.n	8000446 <GPIO_init+0x1ba>
 800040e:	2303      	movs	r3, #3
 8000410:	e019      	b.n	8000446 <GPIO_init+0x1ba>
 8000412:	2302      	movs	r3, #2
 8000414:	e017      	b.n	8000446 <GPIO_init+0x1ba>
 8000416:	2301      	movs	r3, #1
 8000418:	e015      	b.n	8000446 <GPIO_init+0x1ba>
 800041a:	bf00      	nop
 800041c:	54022000 	.word	0x54022000
 8000420:	52020000 	.word	0x52020000
 8000424:	52020400 	.word	0x52020400
 8000428:	52020800 	.word	0x52020800
 800042c:	52020c00 	.word	0x52020c00
 8000430:	52021000 	.word	0x52021000
 8000434:	52021400 	.word	0x52021400
 8000438:	52021800 	.word	0x52021800
 800043c:	52021c00 	.word	0x52021c00
 8000440:	52022000 	.word	0x52022000
 8000444:	2300      	movs	r3, #0
 8000446:	747b      	strb	r3, [r7, #17]

		// Su questo microcontrollore non vi e' esplicitamente il registro SYSCFG e di conseguenza il suo peripheral clock potrebbe essere gia' abilitato di default
		EXTI->EXTICR[EXTI_CR_number] &= ~(0xFF << (EXTI_CR_bit_position * 8));
 8000448:	4a6a      	ldr	r2, [pc, #424]	@ (80005f4 <GPIO_init+0x368>)
 800044a:	7cfb      	ldrb	r3, [r7, #19]
 800044c:	3318      	adds	r3, #24
 800044e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000452:	7cbb      	ldrb	r3, [r7, #18]
 8000454:	00db      	lsls	r3, r3, #3
 8000456:	21ff      	movs	r1, #255	@ 0xff
 8000458:	fa01 f303 	lsl.w	r3, r1, r3
 800045c:	43db      	mvns	r3, r3
 800045e:	4618      	mov	r0, r3
 8000460:	4964      	ldr	r1, [pc, #400]	@ (80005f4 <GPIO_init+0x368>)
 8000462:	7cfb      	ldrb	r3, [r7, #19]
 8000464:	4002      	ands	r2, r0
 8000466:	3318      	adds	r3, #24
 8000468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EXTI->EXTICR[EXTI_CR_number] |= portCode << (EXTI_CR_bit_position * 8);		// * 8 in quanto ogni pin occupa 8 bit in EXTICRx
 800046c:	4a61      	ldr	r2, [pc, #388]	@ (80005f4 <GPIO_init+0x368>)
 800046e:	7cfb      	ldrb	r3, [r7, #19]
 8000470:	3318      	adds	r3, #24
 8000472:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000476:	7c79      	ldrb	r1, [r7, #17]
 8000478:	7cbb      	ldrb	r3, [r7, #18]
 800047a:	00db      	lsls	r3, r3, #3
 800047c:	fa01 f303 	lsl.w	r3, r1, r3
 8000480:	4618      	mov	r0, r3
 8000482:	495c      	ldr	r1, [pc, #368]	@ (80005f4 <GPIO_init+0x368>)
 8000484:	7cfb      	ldrb	r3, [r7, #19]
 8000486:	4302      	orrs	r2, r0
 8000488:	3318      	adds	r3, #24
 800048a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR1
		EXTI->IMR1 |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800048e:	4b59      	ldr	r3, [pc, #356]	@ (80005f4 <GPIO_init+0x368>)
 8000490:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	7912      	ldrb	r2, [r2, #4]
 8000498:	4611      	mov	r1, r2
 800049a:	2201      	movs	r2, #1
 800049c:	408a      	lsls	r2, r1
 800049e:	4611      	mov	r1, r2
 80004a0:	4a54      	ldr	r2, [pc, #336]	@ (80005f4 <GPIO_init+0x368>)
 80004a2:	430b      	orrs	r3, r1
 80004a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

	}

	// 2. Configure the speed of GPIO pin
	temp = 0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	799b      	ldrb	r3, [r3, #6]
 80004b0:	461a      	mov	r2, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	791b      	ldrb	r3, [r3, #4]
 80004b6:	005b      	lsls	r3, r3, #1
 80004b8:	fa02 f303 	lsl.w	r3, r2, r3
 80004bc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));			// Clearing bit values: 0x3 = 11 -> ~(0x3) = 00
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	689a      	ldr	r2, [r3, #8]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	791b      	ldrb	r3, [r3, #4]
 80004c8:	005b      	lsls	r3, r3, #1
 80004ca:	2103      	movs	r1, #3
 80004cc:	fa01 f303 	lsl.w	r3, r1, r3
 80004d0:	43db      	mvns	r3, r3
 80004d2:	4619      	mov	r1, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	400a      	ands	r2, r1
 80004da:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	6899      	ldr	r1, [r3, #8]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	697a      	ldr	r2, [r7, #20]
 80004e8:	430a      	orrs	r2, r1
 80004ea:	609a      	str	r2, [r3, #8]

	// 3. Configure the pull-up / pull-down of GPIO pin
	temp = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	79db      	ldrb	r3, [r3, #7]
 80004f4:	461a      	mov	r2, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	791b      	ldrb	r3, [r3, #4]
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000500:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));			// Clearing bit values: 0x3 = 11 -> ~(0x3) = 00
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	68da      	ldr	r2, [r3, #12]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	791b      	ldrb	r3, [r3, #4]
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	2103      	movs	r1, #3
 8000510:	fa01 f303 	lsl.w	r3, r1, r3
 8000514:	43db      	mvns	r3, r3
 8000516:	4619      	mov	r1, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	400a      	ands	r2, r1
 800051e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	68d9      	ldr	r1, [r3, #12]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	697a      	ldr	r2, [r7, #20]
 800052c:	430a      	orrs	r2, r1
 800052e:	60da      	str	r2, [r3, #12]

	// 4. Configure the output type of GPIO pin
	temp = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	795b      	ldrb	r3, [r3, #5]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d11d      	bne.n	8000578 <GPIO_init+0x2ec>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	7a1b      	ldrb	r3, [r3, #8]
 8000540:	461a      	mov	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	791b      	ldrb	r3, [r3, #4]
 8000546:	fa02 f303 	lsl.w	r3, r2, r3
 800054a:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);				// Clearing bit values: 0x1 = 1 -> ~(0x1) = 0
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	685a      	ldr	r2, [r3, #4]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	791b      	ldrb	r3, [r3, #4]
 8000556:	4619      	mov	r1, r3
 8000558:	2301      	movs	r3, #1
 800055a:	408b      	lsls	r3, r1
 800055c:	43db      	mvns	r3, r3
 800055e:	4619      	mov	r1, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	400a      	ands	r2, r1
 8000566:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	6859      	ldr	r1, [r3, #4]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	697a      	ldr	r2, [r7, #20]
 8000574:	430a      	orrs	r2, r1
 8000576:	605a      	str	r2, [r3, #4]
	}

	// 5. Configure the Alternate Functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	795b      	ldrb	r3, [r3, #5]
 800057c:	2b02      	cmp	r3, #2
 800057e:	d134      	bne.n	80005ea <GPIO_init+0x35e>
	{
		// Configure the Alternate Function registers
		// If GPIO mode is Alternate Function Mode, then we can configure the Alternate Function registers, otherwise the GPIO_PinAltFunMode has no meaning
		uint8_t lowOrHightAltFnReg = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	791b      	ldrb	r3, [r3, #4]
 8000584:	08db      	lsrs	r3, r3, #3
 8000586:	743b      	strb	r3, [r7, #16]
		uint8_t bitPositionAltFnReg = 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	791b      	ldrb	r3, [r3, #4]
 800058c:	f003 0307 	and.w	r3, r3, #7
 8000590:	b2db      	uxtb	r3, r3
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	73fb      	strb	r3, [r7, #15]

		pGPIOHandle->pGPIOx->AFR[lowOrHightAltFnReg] &= ~(0xF << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));			// Clearing bit values: 0xF = 1111 -> ~(0xF) = 0000
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	7c3a      	ldrb	r2, [r7, #16]
 800059c:	3208      	adds	r2, #8
 800059e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	791b      	ldrb	r3, [r3, #4]
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	220f      	movs	r2, #15
 80005aa:	fa02 f303 	lsl.w	r3, r2, r3
 80005ae:	43db      	mvns	r3, r3
 80005b0:	4618      	mov	r0, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	7c3a      	ldrb	r2, [r7, #16]
 80005b8:	4001      	ands	r1, r0
 80005ba:	3208      	adds	r2, #8
 80005bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[lowOrHightAltFnReg] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << bitPositionAltFnReg;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	7c3a      	ldrb	r2, [r7, #16]
 80005c6:	3208      	adds	r2, #8
 80005c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	7a5b      	ldrb	r3, [r3, #9]
 80005d0:	461a      	mov	r2, r3
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	fa02 f303 	lsl.w	r3, r2, r3
 80005d8:	4618      	mov	r0, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	7c3a      	ldrb	r2, [r7, #16]
 80005e0:	4301      	orrs	r1, r0
 80005e2:	3208      	adds	r2, #8
 80005e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	return;
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
}
 80005ec:	371c      	adds	r7, #28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	54022000 	.word	0x54022000

080005f8 <GPIO_peripheralClockControl>:
*
*
* @Author  {slazzaro},  @date  {16/11/2024}
******************************************************************************/
void GPIO_peripheralClockControl(GPIO_RegDef_t *pGPIOx, uint8_t enable)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	70fb      	strb	r3, [r7, #3]
	if(enable == ENABLE)
 8000604:	78fb      	ldrb	r3, [r7, #3]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d174      	bne.n	80006f4 <GPIO_peripheralClockControl+0xfc>
	{
		if(pGPIOx == GPIOA)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a76      	ldr	r2, [pc, #472]	@ (80007e8 <GPIO_peripheralClockControl+0x1f0>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d108      	bne.n	8000624 <GPIO_peripheralClockControl+0x2c>
		{
			GPIOA_PCLK_EN();
 8000612:	4b76      	ldr	r3, [pc, #472]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 8000614:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000618:	4a74      	ldr	r2, [pc, #464]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
		{
			GPIOI_PCLK_DI();
		}
	}

	return;
 8000622:	e0dc      	b.n	80007de <GPIO_peripheralClockControl+0x1e6>
		else if(pGPIOx == GPIOB)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a72      	ldr	r2, [pc, #456]	@ (80007f0 <GPIO_peripheralClockControl+0x1f8>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d108      	bne.n	800063e <GPIO_peripheralClockControl+0x46>
			GPIOB_PCLK_EN();
 800062c:	4b6f      	ldr	r3, [pc, #444]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 800062e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000632:	4a6e      	ldr	r2, [pc, #440]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 8000634:	f043 0302 	orr.w	r3, r3, #2
 8000638:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	return;
 800063c:	e0cf      	b.n	80007de <GPIO_peripheralClockControl+0x1e6>
		else if(pGPIOx == GPIOC)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a6c      	ldr	r2, [pc, #432]	@ (80007f4 <GPIO_peripheralClockControl+0x1fc>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d108      	bne.n	8000658 <GPIO_peripheralClockControl+0x60>
			GPIOC_PCLK_EN();
 8000646:	4b69      	ldr	r3, [pc, #420]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 8000648:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800064c:	4a67      	ldr	r2, [pc, #412]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 800064e:	f043 0304 	orr.w	r3, r3, #4
 8000652:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	return;
 8000656:	e0c2      	b.n	80007de <GPIO_peripheralClockControl+0x1e6>
		else if(pGPIOx == GPIOD)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4a67      	ldr	r2, [pc, #412]	@ (80007f8 <GPIO_peripheralClockControl+0x200>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d108      	bne.n	8000672 <GPIO_peripheralClockControl+0x7a>
			GPIOD_PCLK_EN();
 8000660:	4b62      	ldr	r3, [pc, #392]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 8000662:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000666:	4a61      	ldr	r2, [pc, #388]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 8000668:	f043 0308 	orr.w	r3, r3, #8
 800066c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	return;
 8000670:	e0b5      	b.n	80007de <GPIO_peripheralClockControl+0x1e6>
		else if(pGPIOx == GPIOE)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a61      	ldr	r2, [pc, #388]	@ (80007fc <GPIO_peripheralClockControl+0x204>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d108      	bne.n	800068c <GPIO_peripheralClockControl+0x94>
			GPIOE_PCLK_EN();
 800067a:	4b5c      	ldr	r3, [pc, #368]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 800067c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000680:	4a5a      	ldr	r2, [pc, #360]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 8000682:	f043 0310 	orr.w	r3, r3, #16
 8000686:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	return;
 800068a:	e0a8      	b.n	80007de <GPIO_peripheralClockControl+0x1e6>
		else if(pGPIOx == GPIOF)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a5c      	ldr	r2, [pc, #368]	@ (8000800 <GPIO_peripheralClockControl+0x208>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d108      	bne.n	80006a6 <GPIO_peripheralClockControl+0xae>
			GPIOF_PCLK_EN();
 8000694:	4b55      	ldr	r3, [pc, #340]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 8000696:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800069a:	4a54      	ldr	r2, [pc, #336]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 800069c:	f043 0320 	orr.w	r3, r3, #32
 80006a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	return;
 80006a4:	e09b      	b.n	80007de <GPIO_peripheralClockControl+0x1e6>
		else if(pGPIOx == GPIOG)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a56      	ldr	r2, [pc, #344]	@ (8000804 <GPIO_peripheralClockControl+0x20c>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d108      	bne.n	80006c0 <GPIO_peripheralClockControl+0xc8>
			GPIOG_PCLK_EN();
 80006ae:	4b4f      	ldr	r3, [pc, #316]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 80006b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006b4:	4a4d      	ldr	r2, [pc, #308]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 80006b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	return;
 80006be:	e08e      	b.n	80007de <GPIO_peripheralClockControl+0x1e6>
		else if(pGPIOx == GPIOH)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a51      	ldr	r2, [pc, #324]	@ (8000808 <GPIO_peripheralClockControl+0x210>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d108      	bne.n	80006da <GPIO_peripheralClockControl+0xe2>
			GPIOH_PCLK_EN();
 80006c8:	4b48      	ldr	r3, [pc, #288]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 80006ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ce:	4a47      	ldr	r2, [pc, #284]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 80006d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	return;
 80006d8:	e081      	b.n	80007de <GPIO_peripheralClockControl+0x1e6>
		else if(pGPIOx == GPIOI)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a4b      	ldr	r2, [pc, #300]	@ (800080c <GPIO_peripheralClockControl+0x214>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d17d      	bne.n	80007de <GPIO_peripheralClockControl+0x1e6>
			GPIOI_PCLK_EN();
 80006e2:	4b42      	ldr	r3, [pc, #264]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 80006e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006e8:	4a40      	ldr	r2, [pc, #256]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 80006ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	return;
 80006f2:	e074      	b.n	80007de <GPIO_peripheralClockControl+0x1e6>
		if(pGPIOx == GPIOA)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a3c      	ldr	r2, [pc, #240]	@ (80007e8 <GPIO_peripheralClockControl+0x1f0>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d108      	bne.n	800070e <GPIO_peripheralClockControl+0x116>
			GPIOA_PCLK_DI();
 80006fc:	4b3b      	ldr	r3, [pc, #236]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 80006fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000702:	4a3a      	ldr	r2, [pc, #232]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 8000704:	f023 0301 	bic.w	r3, r3, #1
 8000708:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	return;
 800070c:	e067      	b.n	80007de <GPIO_peripheralClockControl+0x1e6>
		else if(pGPIOx == GPIOB)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4a37      	ldr	r2, [pc, #220]	@ (80007f0 <GPIO_peripheralClockControl+0x1f8>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d108      	bne.n	8000728 <GPIO_peripheralClockControl+0x130>
			GPIOB_PCLK_DI();
 8000716:	4b35      	ldr	r3, [pc, #212]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 8000718:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800071c:	4a33      	ldr	r2, [pc, #204]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 800071e:	f023 0302 	bic.w	r3, r3, #2
 8000722:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	return;
 8000726:	e05a      	b.n	80007de <GPIO_peripheralClockControl+0x1e6>
		else if(pGPIOx == GPIOC)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a32      	ldr	r2, [pc, #200]	@ (80007f4 <GPIO_peripheralClockControl+0x1fc>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d108      	bne.n	8000742 <GPIO_peripheralClockControl+0x14a>
			GPIOC_PCLK_DI();
 8000730:	4b2e      	ldr	r3, [pc, #184]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 8000732:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000736:	4a2d      	ldr	r2, [pc, #180]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 8000738:	f023 0304 	bic.w	r3, r3, #4
 800073c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	return;
 8000740:	e04d      	b.n	80007de <GPIO_peripheralClockControl+0x1e6>
		else if(pGPIOx == GPIOD)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4a2c      	ldr	r2, [pc, #176]	@ (80007f8 <GPIO_peripheralClockControl+0x200>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d108      	bne.n	800075c <GPIO_peripheralClockControl+0x164>
			GPIOD_PCLK_DI();
 800074a:	4b28      	ldr	r3, [pc, #160]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 800074c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000750:	4a26      	ldr	r2, [pc, #152]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 8000752:	f023 0308 	bic.w	r3, r3, #8
 8000756:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	return;
 800075a:	e040      	b.n	80007de <GPIO_peripheralClockControl+0x1e6>
		else if(pGPIOx == GPIOE)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a27      	ldr	r2, [pc, #156]	@ (80007fc <GPIO_peripheralClockControl+0x204>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d108      	bne.n	8000776 <GPIO_peripheralClockControl+0x17e>
			GPIOE_PCLK_DI();
 8000764:	4b21      	ldr	r3, [pc, #132]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 8000766:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800076a:	4a20      	ldr	r2, [pc, #128]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 800076c:	f023 0310 	bic.w	r3, r3, #16
 8000770:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	return;
 8000774:	e033      	b.n	80007de <GPIO_peripheralClockControl+0x1e6>
		else if(pGPIOx == GPIOF)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a21      	ldr	r2, [pc, #132]	@ (8000800 <GPIO_peripheralClockControl+0x208>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d108      	bne.n	8000790 <GPIO_peripheralClockControl+0x198>
			GPIOF_PCLK_DI();
 800077e:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 8000780:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000784:	4a19      	ldr	r2, [pc, #100]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 8000786:	f023 0320 	bic.w	r3, r3, #32
 800078a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	return;
 800078e:	e026      	b.n	80007de <GPIO_peripheralClockControl+0x1e6>
		else if(pGPIOx == GPIOG)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4a1c      	ldr	r2, [pc, #112]	@ (8000804 <GPIO_peripheralClockControl+0x20c>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d108      	bne.n	80007aa <GPIO_peripheralClockControl+0x1b2>
			GPIOG_PCLK_DI();
 8000798:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 800079a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800079e:	4a13      	ldr	r2, [pc, #76]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 80007a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80007a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	return;
 80007a8:	e019      	b.n	80007de <GPIO_peripheralClockControl+0x1e6>
		else if(pGPIOx == GPIOH)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4a16      	ldr	r2, [pc, #88]	@ (8000808 <GPIO_peripheralClockControl+0x210>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d108      	bne.n	80007c4 <GPIO_peripheralClockControl+0x1cc>
			GPIOH_PCLK_DI();
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 80007b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007b8:	4a0c      	ldr	r2, [pc, #48]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 80007ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80007be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	return;
 80007c2:	e00c      	b.n	80007de <GPIO_peripheralClockControl+0x1e6>
		else if(pGPIOx == GPIOI)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a11      	ldr	r2, [pc, #68]	@ (800080c <GPIO_peripheralClockControl+0x214>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d108      	bne.n	80007de <GPIO_peripheralClockControl+0x1e6>
			GPIOI_PCLK_DI();
 80007cc:	4b07      	ldr	r3, [pc, #28]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 80007ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007d2:	4a06      	ldr	r2, [pc, #24]	@ (80007ec <GPIO_peripheralClockControl+0x1f4>)
 80007d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80007d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
	return;
 80007dc:	bf00      	nop
 80007de:	bf00      	nop
}
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr
 80007e8:	52020000 	.word	0x52020000
 80007ec:	54020c00 	.word	0x54020c00
 80007f0:	52020400 	.word	0x52020400
 80007f4:	52020800 	.word	0x52020800
 80007f8:	52020c00 	.word	0x52020c00
 80007fc:	52021000 	.word	0x52021000
 8000800:	52021400 	.word	0x52021400
 8000804:	52021800 	.word	0x52021800
 8000808:	52021c00 	.word	0x52021c00
 800080c:	52022000 	.word	0x52022000

08000810 <GPIO_toggleOutputPin>:

	return;
}

void GPIO_toggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << pinNumber);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	695b      	ldr	r3, [r3, #20]
 8000820:	78fa      	ldrb	r2, [r7, #3]
 8000822:	2101      	movs	r1, #1
 8000824:	fa01 f202 	lsl.w	r2, r1, r2
 8000828:	405a      	eors	r2, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	615a      	str	r2, [r3, #20]

	return;
 800082e:	bf00      	nop
}
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <GPIO_IRQInterruptConfig>:

void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t enable)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	460a      	mov	r2, r1
 8000842:	71fb      	strb	r3, [r7, #7]
 8000844:	4613      	mov	r3, r2
 8000846:	71bb      	strb	r3, [r7, #6]
	if(enable == ENABLE)
 8000848:	79bb      	ldrb	r3, [r7, #6]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d16d      	bne.n	800092a <GPIO_IRQInterruptConfig+0xf2>
	{
		// This microcontroller has 130 IRQ Numbers (see vector table)
		if(IRQNumber <= 31)
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b1f      	cmp	r3, #31
 8000852:	d815      	bhi.n	8000880 <GPIO_IRQInterruptConfig+0x48>
		{
			// Program NVIC_ISER0 register
			*NVIC_ISER0_NS |= (1 << IRQNumber);
 8000854:	4b69      	ldr	r3, [pc, #420]	@ (80009fc <GPIO_IRQInterruptConfig+0x1c4>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	79fa      	ldrb	r2, [r7, #7]
 800085a:	2101      	movs	r1, #1
 800085c:	fa01 f202 	lsl.w	r2, r1, r2
 8000860:	4611      	mov	r1, r2
 8000862:	4a66      	ldr	r2, [pc, #408]	@ (80009fc <GPIO_IRQInterruptConfig+0x1c4>)
 8000864:	430b      	orrs	r3, r1
 8000866:	6013      	str	r3, [r2, #0]
			*NVIC_ICER0_NS &= ~(1 << IRQNumber);
 8000868:	4b65      	ldr	r3, [pc, #404]	@ (8000a00 <GPIO_IRQInterruptConfig+0x1c8>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	79fa      	ldrb	r2, [r7, #7]
 800086e:	2101      	movs	r1, #1
 8000870:	fa01 f202 	lsl.w	r2, r1, r2
 8000874:	43d2      	mvns	r2, r2
 8000876:	4611      	mov	r1, r2
 8000878:	4a61      	ldr	r2, [pc, #388]	@ (8000a00 <GPIO_IRQInterruptConfig+0x1c8>)
 800087a:	400b      	ands	r3, r1
 800087c:	6013      	str	r3, [r2, #0]
		{
			// Program NVIC_ICER4 register
			*NVIC_ICER4 |= (1 << (IRQNumber % 128));
		}
	}
}
 800087e:	e0b7      	b.n	80009f0 <GPIO_IRQInterruptConfig+0x1b8>
		else if(IRQNumber > 31 && IRQNumber <= 63)
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b1f      	cmp	r3, #31
 8000884:	d90f      	bls.n	80008a6 <GPIO_IRQInterruptConfig+0x6e>
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	2b3f      	cmp	r3, #63	@ 0x3f
 800088a:	d80c      	bhi.n	80008a6 <GPIO_IRQInterruptConfig+0x6e>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800088c:	4b5d      	ldr	r3, [pc, #372]	@ (8000a04 <GPIO_IRQInterruptConfig+0x1cc>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	79fa      	ldrb	r2, [r7, #7]
 8000892:	f002 021f 	and.w	r2, r2, #31
 8000896:	2101      	movs	r1, #1
 8000898:	fa01 f202 	lsl.w	r2, r1, r2
 800089c:	4611      	mov	r1, r2
 800089e:	4a59      	ldr	r2, [pc, #356]	@ (8000a04 <GPIO_IRQInterruptConfig+0x1cc>)
 80008a0:	430b      	orrs	r3, r1
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	e0a4      	b.n	80009f0 <GPIO_IRQInterruptConfig+0x1b8>
		else if(IRQNumber > 63 && IRQNumber <= 95)
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80008aa:	d90f      	bls.n	80008cc <GPIO_IRQInterruptConfig+0x94>
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	2b5f      	cmp	r3, #95	@ 0x5f
 80008b0:	d80c      	bhi.n	80008cc <GPIO_IRQInterruptConfig+0x94>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 80008b2:	4b55      	ldr	r3, [pc, #340]	@ (8000a08 <GPIO_IRQInterruptConfig+0x1d0>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	79fa      	ldrb	r2, [r7, #7]
 80008b8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80008bc:	2101      	movs	r1, #1
 80008be:	fa01 f202 	lsl.w	r2, r1, r2
 80008c2:	4611      	mov	r1, r2
 80008c4:	4a50      	ldr	r2, [pc, #320]	@ (8000a08 <GPIO_IRQInterruptConfig+0x1d0>)
 80008c6:	430b      	orrs	r3, r1
 80008c8:	6013      	str	r3, [r2, #0]
 80008ca:	e091      	b.n	80009f0 <GPIO_IRQInterruptConfig+0x1b8>
		else if(IRQNumber > 95 && IRQNumber <= 127)
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	2b5f      	cmp	r3, #95	@ 0x5f
 80008d0:	d917      	bls.n	8000902 <GPIO_IRQInterruptConfig+0xca>
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	db13      	blt.n	8000902 <GPIO_IRQInterruptConfig+0xca>
			*NVIC_ISER3 |= (1 << (IRQNumber % 96));
 80008da:	4b4c      	ldr	r3, [pc, #304]	@ (8000a0c <GPIO_IRQInterruptConfig+0x1d4>)
 80008dc:	6818      	ldr	r0, [r3, #0]
 80008de:	79fa      	ldrb	r2, [r7, #7]
 80008e0:	4b4b      	ldr	r3, [pc, #300]	@ (8000a10 <GPIO_IRQInterruptConfig+0x1d8>)
 80008e2:	fba3 1302 	umull	r1, r3, r3, r2
 80008e6:	0999      	lsrs	r1, r3, #6
 80008e8:	460b      	mov	r3, r1
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	440b      	add	r3, r1
 80008ee:	015b      	lsls	r3, r3, #5
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	461a      	mov	r2, r3
 80008f6:	2301      	movs	r3, #1
 80008f8:	4093      	lsls	r3, r2
 80008fa:	4a44      	ldr	r2, [pc, #272]	@ (8000a0c <GPIO_IRQInterruptConfig+0x1d4>)
 80008fc:	4303      	orrs	r3, r0
 80008fe:	6013      	str	r3, [r2, #0]
 8000900:	e076      	b.n	80009f0 <GPIO_IRQInterruptConfig+0x1b8>
		else if(IRQNumber > 127 && IRQNumber <= 130)
 8000902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000906:	2b00      	cmp	r3, #0
 8000908:	da72      	bge.n	80009f0 <GPIO_IRQInterruptConfig+0x1b8>
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b82      	cmp	r3, #130	@ 0x82
 800090e:	d86f      	bhi.n	80009f0 <GPIO_IRQInterruptConfig+0x1b8>
			*NVIC_ISER4 |= (1 << (IRQNumber % 128));
 8000910:	4b40      	ldr	r3, [pc, #256]	@ (8000a14 <GPIO_IRQInterruptConfig+0x1dc>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	79fa      	ldrb	r2, [r7, #7]
 8000916:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800091a:	2101      	movs	r1, #1
 800091c:	fa01 f202 	lsl.w	r2, r1, r2
 8000920:	4611      	mov	r1, r2
 8000922:	4a3c      	ldr	r2, [pc, #240]	@ (8000a14 <GPIO_IRQInterruptConfig+0x1dc>)
 8000924:	430b      	orrs	r3, r1
 8000926:	6013      	str	r3, [r2, #0]
}
 8000928:	e062      	b.n	80009f0 <GPIO_IRQInterruptConfig+0x1b8>
		if(IRQNumber <= 31)
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b1f      	cmp	r3, #31
 800092e:	d80a      	bhi.n	8000946 <GPIO_IRQInterruptConfig+0x10e>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000930:	4b39      	ldr	r3, [pc, #228]	@ (8000a18 <GPIO_IRQInterruptConfig+0x1e0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	79fa      	ldrb	r2, [r7, #7]
 8000936:	2101      	movs	r1, #1
 8000938:	fa01 f202 	lsl.w	r2, r1, r2
 800093c:	4611      	mov	r1, r2
 800093e:	4a36      	ldr	r2, [pc, #216]	@ (8000a18 <GPIO_IRQInterruptConfig+0x1e0>)
 8000940:	430b      	orrs	r3, r1
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	e054      	b.n	80009f0 <GPIO_IRQInterruptConfig+0x1b8>
		else if(IRQNumber > 31 && IRQNumber <= 63)
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	2b1f      	cmp	r3, #31
 800094a:	d90f      	bls.n	800096c <GPIO_IRQInterruptConfig+0x134>
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000950:	d80c      	bhi.n	800096c <GPIO_IRQInterruptConfig+0x134>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000952:	4b32      	ldr	r3, [pc, #200]	@ (8000a1c <GPIO_IRQInterruptConfig+0x1e4>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	79fa      	ldrb	r2, [r7, #7]
 8000958:	f002 021f 	and.w	r2, r2, #31
 800095c:	2101      	movs	r1, #1
 800095e:	fa01 f202 	lsl.w	r2, r1, r2
 8000962:	4611      	mov	r1, r2
 8000964:	4a2d      	ldr	r2, [pc, #180]	@ (8000a1c <GPIO_IRQInterruptConfig+0x1e4>)
 8000966:	430b      	orrs	r3, r1
 8000968:	6013      	str	r3, [r2, #0]
 800096a:	e041      	b.n	80009f0 <GPIO_IRQInterruptConfig+0x1b8>
		else if(IRQNumber > 63 && IRQNumber <= 95)
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000970:	d90f      	bls.n	8000992 <GPIO_IRQInterruptConfig+0x15a>
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b5f      	cmp	r3, #95	@ 0x5f
 8000976:	d80c      	bhi.n	8000992 <GPIO_IRQInterruptConfig+0x15a>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000978:	4b29      	ldr	r3, [pc, #164]	@ (8000a20 <GPIO_IRQInterruptConfig+0x1e8>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	79fa      	ldrb	r2, [r7, #7]
 800097e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000982:	2101      	movs	r1, #1
 8000984:	fa01 f202 	lsl.w	r2, r1, r2
 8000988:	4611      	mov	r1, r2
 800098a:	4a25      	ldr	r2, [pc, #148]	@ (8000a20 <GPIO_IRQInterruptConfig+0x1e8>)
 800098c:	430b      	orrs	r3, r1
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	e02e      	b.n	80009f0 <GPIO_IRQInterruptConfig+0x1b8>
		else if(IRQNumber > 95 && IRQNumber <= 127)
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b5f      	cmp	r3, #95	@ 0x5f
 8000996:	d917      	bls.n	80009c8 <GPIO_IRQInterruptConfig+0x190>
 8000998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099c:	2b00      	cmp	r3, #0
 800099e:	db13      	blt.n	80009c8 <GPIO_IRQInterruptConfig+0x190>
			*NVIC_ICER3 |= (1 << (IRQNumber % 96));
 80009a0:	4b20      	ldr	r3, [pc, #128]	@ (8000a24 <GPIO_IRQInterruptConfig+0x1ec>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	79fa      	ldrb	r2, [r7, #7]
 80009a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <GPIO_IRQInterruptConfig+0x1d8>)
 80009a8:	fba3 1302 	umull	r1, r3, r3, r2
 80009ac:	0999      	lsrs	r1, r3, #6
 80009ae:	460b      	mov	r3, r1
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	440b      	add	r3, r1
 80009b4:	015b      	lsls	r3, r3, #5
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	461a      	mov	r2, r3
 80009bc:	2301      	movs	r3, #1
 80009be:	4093      	lsls	r3, r2
 80009c0:	4a18      	ldr	r2, [pc, #96]	@ (8000a24 <GPIO_IRQInterruptConfig+0x1ec>)
 80009c2:	4303      	orrs	r3, r0
 80009c4:	6013      	str	r3, [r2, #0]
 80009c6:	e013      	b.n	80009f0 <GPIO_IRQInterruptConfig+0x1b8>
		else if(IRQNumber > 127 && IRQNumber <= 130)
 80009c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	da0f      	bge.n	80009f0 <GPIO_IRQInterruptConfig+0x1b8>
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	2b82      	cmp	r3, #130	@ 0x82
 80009d4:	d80c      	bhi.n	80009f0 <GPIO_IRQInterruptConfig+0x1b8>
			*NVIC_ICER4 |= (1 << (IRQNumber % 128));
 80009d6:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <GPIO_IRQInterruptConfig+0x1f0>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	79fa      	ldrb	r2, [r7, #7]
 80009dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80009e0:	2101      	movs	r1, #1
 80009e2:	fa01 f202 	lsl.w	r2, r1, r2
 80009e6:	4611      	mov	r1, r2
 80009e8:	4a0f      	ldr	r2, [pc, #60]	@ (8000a28 <GPIO_IRQInterruptConfig+0x1f0>)
 80009ea:	430b      	orrs	r3, r1
 80009ec:	6013      	str	r3, [r2, #0]
}
 80009ee:	e7ff      	b.n	80009f0 <GPIO_IRQInterruptConfig+0x1b8>
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e002e100 	.word	0xe002e100
 8000a00:	e002e180 	.word	0xe002e180
 8000a04:	e000e104 	.word	0xe000e104
 8000a08:	e000e108 	.word	0xe000e108
 8000a0c:	e000e10c 	.word	0xe000e10c
 8000a10:	aaaaaaab 	.word	0xaaaaaaab
 8000a14:	e000e110 	.word	0xe000e110
 8000a18:	e000e180 	.word	0xe000e180
 8000a1c:	e000e184 	.word	0xe000e184
 8000a20:	e000e188 	.word	0xe000e188
 8000a24:	e000e18c 	.word	0xe000e18c
 8000a28:	e000e190 	.word	0xe000e190

08000a2c <GPIO_IRQPriorityConfig>:


void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	71fb      	strb	r3, [r7, #7]
	// 1. Find out the IPR register
	uint8_t IPRx = IRQNumber / 4;
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	089b      	lsrs	r3, r3, #2
 8000a3c:	73fb      	strb	r3, [r7, #15]
	uint8_t IPRx_section = IRQNumber % 4;
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	f003 0303 	and.w	r3, r3, #3
 8000a44:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = (8 * IPRx_section) + (8 - NUM_PRIORITY_BITS_IMPLEMENTED);
 8000a46:	7bbb      	ldrb	r3, [r7, #14]
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	737b      	strb	r3, [r7, #13]

	*(NVIC_IPR_BASE_ADDRESS + IPRx) |= (IRQPriority << shift_amount);
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000a58:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000a5c:	6819      	ldr	r1, [r3, #0]
 8000a5e:	7b7b      	ldrb	r3, [r7, #13]
 8000a60:	683a      	ldr	r2, [r7, #0]
 8000a62:	409a      	lsls	r2, r3
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000a6c:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000a70:	430a      	orrs	r2, r1
 8000a72:	601a      	str	r2, [r3, #0]
//	*(NVIC_IPR_NS_BASE_ADDRESS + IPRx) |= (IRQPriority << shift_amount);
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
	...

08000a80 <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t pinMode, uint8_t pinNumber)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	460a      	mov	r2, r1
 8000a8a:	71fb      	strb	r3, [r7, #7]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	71bb      	strb	r3, [r7, #6]
	// Clear the EXTI PR register corresponding to the pin number
	if(pinMode == GPIO_MODE_IT_FT)
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	2b04      	cmp	r3, #4
 8000a94:	d113      	bne.n	8000abe <GPIO_IRQHandling+0x3e>
	{
		// Falling trigger
		if(EXTI->FPR1 & (1 << pinNumber))
 8000a96:	4b2c      	ldr	r3, [pc, #176]	@ (8000b48 <GPIO_IRQHandling+0xc8>)
 8000a98:	691b      	ldr	r3, [r3, #16]
 8000a9a:	79ba      	ldrb	r2, [r7, #6]
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d04a      	beq.n	8000b3e <GPIO_IRQHandling+0xbe>
		{
			// Clear that Pending register bit. This bit is cleared by writing 1 to it.
			EXTI->FPR1 |= (1 << pinNumber);
 8000aa8:	4b27      	ldr	r3, [pc, #156]	@ (8000b48 <GPIO_IRQHandling+0xc8>)
 8000aaa:	691b      	ldr	r3, [r3, #16]
 8000aac:	79ba      	ldrb	r2, [r7, #6]
 8000aae:	2101      	movs	r1, #1
 8000ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4a24      	ldr	r2, [pc, #144]	@ (8000b48 <GPIO_IRQHandling+0xc8>)
 8000ab8:	430b      	orrs	r3, r1
 8000aba:	6113      	str	r3, [r2, #16]
		{
			// Clear that Pending register bit. This bit is cleared by writing 1 to it.
			EXTI->RPR1 |= (1 << pinNumber);
		}
	}
}
 8000abc:	e03f      	b.n	8000b3e <GPIO_IRQHandling+0xbe>
	else if(pinMode == GPIO_MODE_IT_RT)
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	2b05      	cmp	r3, #5
 8000ac2:	d113      	bne.n	8000aec <GPIO_IRQHandling+0x6c>
		if(EXTI->RPR1 & (1 << pinNumber))
 8000ac4:	4b20      	ldr	r3, [pc, #128]	@ (8000b48 <GPIO_IRQHandling+0xc8>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	79ba      	ldrb	r2, [r7, #6]
 8000aca:	2101      	movs	r1, #1
 8000acc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d033      	beq.n	8000b3e <GPIO_IRQHandling+0xbe>
			EXTI->RPR1 |= (1 << pinNumber);
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <GPIO_IRQHandling+0xc8>)
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	79ba      	ldrb	r2, [r7, #6]
 8000adc:	2101      	movs	r1, #1
 8000ade:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4a18      	ldr	r2, [pc, #96]	@ (8000b48 <GPIO_IRQHandling+0xc8>)
 8000ae6:	430b      	orrs	r3, r1
 8000ae8:	60d3      	str	r3, [r2, #12]
}
 8000aea:	e028      	b.n	8000b3e <GPIO_IRQHandling+0xbe>
	else if(pinMode == GPIO_MODE_IT_RFT)
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	2b06      	cmp	r3, #6
 8000af0:	d125      	bne.n	8000b3e <GPIO_IRQHandling+0xbe>
		if(EXTI->FPR1 & (1 << pinNumber))
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <GPIO_IRQHandling+0xc8>)
 8000af4:	691b      	ldr	r3, [r3, #16]
 8000af6:	79ba      	ldrb	r2, [r7, #6]
 8000af8:	2101      	movs	r1, #1
 8000afa:	fa01 f202 	lsl.w	r2, r1, r2
 8000afe:	4013      	ands	r3, r2
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d009      	beq.n	8000b18 <GPIO_IRQHandling+0x98>
			EXTI->FPR1 |= (1 << pinNumber);
 8000b04:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <GPIO_IRQHandling+0xc8>)
 8000b06:	691b      	ldr	r3, [r3, #16]
 8000b08:	79ba      	ldrb	r2, [r7, #6]
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b10:	4611      	mov	r1, r2
 8000b12:	4a0d      	ldr	r2, [pc, #52]	@ (8000b48 <GPIO_IRQHandling+0xc8>)
 8000b14:	430b      	orrs	r3, r1
 8000b16:	6113      	str	r3, [r2, #16]
		if(EXTI->RPR1 & (1 << pinNumber))
 8000b18:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <GPIO_IRQHandling+0xc8>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	79ba      	ldrb	r2, [r7, #6]
 8000b1e:	2101      	movs	r1, #1
 8000b20:	fa01 f202 	lsl.w	r2, r1, r2
 8000b24:	4013      	ands	r3, r2
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d009      	beq.n	8000b3e <GPIO_IRQHandling+0xbe>
			EXTI->RPR1 |= (1 << pinNumber);
 8000b2a:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <GPIO_IRQHandling+0xc8>)
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	79ba      	ldrb	r2, [r7, #6]
 8000b30:	2101      	movs	r1, #1
 8000b32:	fa01 f202 	lsl.w	r2, r1, r2
 8000b36:	4611      	mov	r1, r2
 8000b38:	4a03      	ldr	r2, [pc, #12]	@ (8000b48 <GPIO_IRQHandling+0xc8>)
 8000b3a:	430b      	orrs	r3, r1
 8000b3c:	60d3      	str	r3, [r2, #12]
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	54022000 	.word	0x54022000

08000b4c <delay>:
#define OPEN_DRAIN_CONFIGURATION	1

#define PIN_OUTPUT_TYPE				PUSH_PULL_CONFIGURATION

void delay(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	e002      	b.n	8000b5e <delay+0x12>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a04      	ldr	r2, [pc, #16]	@ (8000b74 <delay+0x28>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d9f8      	bls.n	8000b58 <delay+0xc>
}
 8000b66:	bf00      	nop
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	0007a11f 	.word	0x0007a11f

08000b78 <main>:

int main(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
	// External LED : PA12
	GPIO_Handle_t gpio_led1 = {0};
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]

	// External button : PB9
	GPIO_Handle_t gpio_btn = {0};
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]

	// External LED -> PA12
	gpio_led1.pGPIOx = GPIOA;
 8000b94:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <main+0x84>)
 8000b96:	60fb      	str	r3, [r7, #12]
	gpio_led1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_12;
 8000b98:	230c      	movs	r3, #12
 8000b9a:	743b      	strb	r3, [r7, #16]
	gpio_led1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	747b      	strb	r3, [r7, #17]
#if(PIN_OUTPUT_TYPE == PUSH_PULL_CONFIGURATION)
	gpio_led1.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;		// push-pull configuration
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	753b      	strb	r3, [r7, #20]
	gpio_led1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PU_PD;	// No pull-up or pull-down
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	74fb      	strb	r3, [r7, #19]
#elif (PIN_OUTPUT_TYPE == OPEN_DRAIN_CONFIGURATION)
	gpio_led1.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;		// open-drain configuration
	gpio_led1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;		// Pull-up resistor
#endif
	gpio_led1.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	74bb      	strb	r3, [r7, #18]

	// External button -> PB9
	gpio_btn.pGPIOx = GPIOB;
 8000bac:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <main+0x88>)
 8000bae:	603b      	str	r3, [r7, #0]
	gpio_btn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_9;
 8000bb0:	2309      	movs	r3, #9
 8000bb2:	713b      	strb	r3, [r7, #4]
	gpio_btn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	717b      	strb	r3, [r7, #5]
	gpio_btn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	71bb      	strb	r3, [r7, #6]
	gpio_btn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;		// GPIO_NO_PU_PD: an external pull-up resistor of 22kOhm must be used in order to avoid floating state. GPIO_PIN_PU: no external pull-up resistor needed.
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	71fb      	strb	r3, [r7, #7]


	// Enable peripherals clock and init GPIO
	GPIO_peripheralClockControl(gpio_led1.pGPIOx, ENABLE);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fd17 	bl	80005f8 <GPIO_peripheralClockControl>
	GPIO_peripheralClockControl(gpio_btn.pGPIOx, ENABLE);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	2101      	movs	r1, #1
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fd12 	bl	80005f8 <GPIO_peripheralClockControl>

	GPIO_init(&gpio_led1);
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fb57 	bl	800028c <GPIO_init>
	GPIO_init(&gpio_btn);
 8000bde:	463b      	mov	r3, r7
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fb53 	bl	800028c <GPIO_init>

	// IRQ Configurations
	GPIO_IRQInterruptConfig(IRQ_NUM_EXTI9, ENABLE);
 8000be6:	2101      	movs	r1, #1
 8000be8:	2014      	movs	r0, #20
 8000bea:	f7ff fe25 	bl	8000838 <GPIO_IRQInterruptConfig>
	GPIO_IRQPriorityConfig(IRQ_NUM_EXTI9, NVIC_IRQ_PRIORITY3);
 8000bee:	2103      	movs	r1, #3
 8000bf0:	2014      	movs	r0, #20
 8000bf2:	f7ff ff1b 	bl	8000a2c <GPIO_IRQPriorityConfig>

	while(1);
 8000bf6:	bf00      	nop
 8000bf8:	e7fd      	b.n	8000bf6 <main+0x7e>
 8000bfa:	bf00      	nop
 8000bfc:	52020000 	.word	0x52020000
 8000c00:	52020400 	.word	0x52020400

08000c04 <EXTI9_IRQHandler>:

	return 0;
}

void EXTI9_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	delay();
 8000c08:	f7ff ffa0 	bl	8000b4c <delay>
	GPIO_IRQHandling(GPIO_MODE_IT_FT, GPIO_PIN_NUM_9);
 8000c0c:	2109      	movs	r1, #9
 8000c0e:	2004      	movs	r0, #4
 8000c10:	f7ff ff36 	bl	8000a80 <GPIO_IRQHandling>
	GPIO_toggleOutputPin(GPIOA, GPIO_PIN_NUM_12);
 8000c14:	210c      	movs	r1, #12
 8000c16:	4802      	ldr	r0, [pc, #8]	@ (8000c20 <EXTI9_IRQHandler+0x1c>)
 8000c18:	f7ff fdfa 	bl	8000810 <GPIO_toggleOutputPin>
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	52020000 	.word	0x52020000

08000c24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c24:	480d      	ldr	r0, [pc, #52]	@ (8000c5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c26:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c28:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c2c:	480c      	ldr	r0, [pc, #48]	@ (8000c60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c2e:	490d      	ldr	r1, [pc, #52]	@ (8000c64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c30:	4a0d      	ldr	r2, [pc, #52]	@ (8000c68 <LoopForever+0xe>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c44:	4c0a      	ldr	r4, [pc, #40]	@ (8000c70 <LoopForever+0x16>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c52:	f000 f811 	bl	8000c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c56:	f7ff ff8f 	bl	8000b78 <main>

08000c5a <LoopForever>:

LoopForever:
  b LoopForever
 8000c5a:	e7fe      	b.n	8000c5a <LoopForever>
  ldr   r0, =_estack
 8000c5c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000c68:	08000ce0 	.word	0x08000ce0
  ldr r2, =_sbss
 8000c6c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000c70:	2000001c 	.word	0x2000001c

08000c74 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC1_IRQHandler>
	...

08000c78 <__libc_init_array>:
 8000c78:	b570      	push	{r4, r5, r6, lr}
 8000c7a:	4d0d      	ldr	r5, [pc, #52]	@ (8000cb0 <__libc_init_array+0x38>)
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	4c0d      	ldr	r4, [pc, #52]	@ (8000cb4 <__libc_init_array+0x3c>)
 8000c80:	1b64      	subs	r4, r4, r5
 8000c82:	10a4      	asrs	r4, r4, #2
 8000c84:	42a6      	cmp	r6, r4
 8000c86:	d109      	bne.n	8000c9c <__libc_init_array+0x24>
 8000c88:	4d0b      	ldr	r5, [pc, #44]	@ (8000cb8 <__libc_init_array+0x40>)
 8000c8a:	2600      	movs	r6, #0
 8000c8c:	4c0b      	ldr	r4, [pc, #44]	@ (8000cbc <__libc_init_array+0x44>)
 8000c8e:	f000 f817 	bl	8000cc0 <_init>
 8000c92:	1b64      	subs	r4, r4, r5
 8000c94:	10a4      	asrs	r4, r4, #2
 8000c96:	42a6      	cmp	r6, r4
 8000c98:	d105      	bne.n	8000ca6 <__libc_init_array+0x2e>
 8000c9a:	bd70      	pop	{r4, r5, r6, pc}
 8000c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ca0:	3601      	adds	r6, #1
 8000ca2:	4798      	blx	r3
 8000ca4:	e7ee      	b.n	8000c84 <__libc_init_array+0xc>
 8000ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000caa:	3601      	adds	r6, #1
 8000cac:	4798      	blx	r3
 8000cae:	e7f2      	b.n	8000c96 <__libc_init_array+0x1e>
 8000cb0:	08000cd8 	.word	0x08000cd8
 8000cb4:	08000cd8 	.word	0x08000cd8
 8000cb8:	08000cd8 	.word	0x08000cd8
 8000cbc:	08000cdc 	.word	0x08000cdc

08000cc0 <_init>:
 8000cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cc2:	bf00      	nop
 8000cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cc6:	bc08      	pop	{r3}
 8000cc8:	469e      	mov	lr, r3
 8000cca:	4770      	bx	lr

08000ccc <_fini>:
 8000ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cce:	bf00      	nop
 8000cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cd2:	bc08      	pop	{r3}
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	4770      	bx	lr
