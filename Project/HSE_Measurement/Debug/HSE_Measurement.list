
HSE_Measurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000016c  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003b8  080003c0  000013c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003b8  080003b8  000013c0  2**0
                  CONTENTS
  4 .ARM          00000000  080003b8  080003b8  000013c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003b8  080003c0  000013c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003b8  080003b8  000013b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003bc  080003bc  000013bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003c0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003c0  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000000f4  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000098  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00001580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000002c  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f88  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000004c7  00000000  00000000  0000257c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003d47  00000000  00000000  00002a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000678a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  000067d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d1  00000000  00000000  00006828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000000 	.word	0x20000000
 8000268:	00000000 	.word	0x00000000
 800026c:	080003a0 	.word	0x080003a0

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000004 	.word	0x20000004
 8000288:	080003a0 	.word	0x080003a0

0800028c <main>:

#define RCC_CR_REG_ADDRESS		(RCC_BASE_ADDRESS + RCC_CR_REG_OFFSET)


int main(void)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
	uint32_t *pRccCrReg = (uint32_t*)RCC_CR_REG_ADDRESS;
 8000292:	4b1a      	ldr	r3, [pc, #104]	@ (80002fc <main+0x70>)
 8000294:	607b      	str	r3, [r7, #4]

	// 1. Enable the HSE clock using HSEON bit (RCC_CR)
	*pRccCrReg |= (1 << 16);
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	601a      	str	r2, [r3, #0]

	// 2. Wait until HSE clock from the external crystal stabilizes (only if crystal is connected)
	while(!(*pRccCrReg & (1 << 17)));
 80002a2:	bf00      	nop
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d0f9      	beq.n	80002a4 <main+0x18>

	// 3. Switch the system clock to HSE (RCC_CFGR)
	uint32_t *pRccCfgrReg = (uint32_t*)RCC_CFGR_REG_ADDRESS;
 80002b0:	4b13      	ldr	r3, [pc, #76]	@ (8000300 <main+0x74>)
 80002b2:	603b      	str	r3, [r7, #0]

	*pRccCfgrReg |= (1 << 0);
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f043 0201 	orr.w	r2, r3, #1
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	601a      	str	r2, [r3, #0]
	*pRccCfgrReg &= (0 << 1);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]

	// 4. Do MCO1 settings to measure it
	*pRccCfgrReg &= (0 << 21);	// clear bit 21
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
	*pRccCfgrReg |= (1 << 22);	// set bit 22
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	601a      	str	r2, [r3, #0]

	// Configure MCO1 prescaler: divisor as 4
	*pRccCfgrReg |= (1 << 26);
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	601a      	str	r2, [r3, #0]
	*pRccCfgrReg |= (1 << 25);
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	601a      	str	r2, [r3, #0]
	*pRccCfgrReg &= (0 << 24);
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]

	// continue ...

    /* Loop forever */
	for(;;);
 80002f6:	bf00      	nop
 80002f8:	e7fd      	b.n	80002f6 <main+0x6a>
 80002fa:	bf00      	nop
 80002fc:	40023800 	.word	0x40023800
 8000300:	40023808 	.word	0x40023808

08000304 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000304:	480d      	ldr	r0, [pc, #52]	@ (800033c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000306:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000308:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800030c:	480c      	ldr	r0, [pc, #48]	@ (8000340 <LoopForever+0x6>)
  ldr r1, =_edata
 800030e:	490d      	ldr	r1, [pc, #52]	@ (8000344 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000310:	4a0d      	ldr	r2, [pc, #52]	@ (8000348 <LoopForever+0xe>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000314:	e002      	b.n	800031c <LoopCopyDataInit>

08000316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800031a:	3304      	adds	r3, #4

0800031c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800031c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800031e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000320:	d3f9      	bcc.n	8000316 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000322:	4a0a      	ldr	r2, [pc, #40]	@ (800034c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000324:	4c0a      	ldr	r4, [pc, #40]	@ (8000350 <LoopForever+0x16>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000328:	e001      	b.n	800032e <LoopFillZerobss>

0800032a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800032a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800032c:	3204      	adds	r2, #4

0800032e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800032e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000330:	d3fb      	bcc.n	800032a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000332:	f000 f811 	bl	8000358 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000336:	f7ff ffa9 	bl	800028c <main>

0800033a <LoopForever>:

LoopForever:
  b LoopForever
 800033a:	e7fe      	b.n	800033a <LoopForever>
  ldr   r0, =_estack
 800033c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000344:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000348:	080003c0 	.word	0x080003c0
  ldr r2, =_sbss
 800034c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000350:	2000001c 	.word	0x2000001c

08000354 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000354:	e7fe      	b.n	8000354 <ADC1_IRQHandler>
	...

08000358 <__libc_init_array>:
 8000358:	b570      	push	{r4, r5, r6, lr}
 800035a:	4d0d      	ldr	r5, [pc, #52]	@ (8000390 <__libc_init_array+0x38>)
 800035c:	2600      	movs	r6, #0
 800035e:	4c0d      	ldr	r4, [pc, #52]	@ (8000394 <__libc_init_array+0x3c>)
 8000360:	1b64      	subs	r4, r4, r5
 8000362:	10a4      	asrs	r4, r4, #2
 8000364:	42a6      	cmp	r6, r4
 8000366:	d109      	bne.n	800037c <__libc_init_array+0x24>
 8000368:	4d0b      	ldr	r5, [pc, #44]	@ (8000398 <__libc_init_array+0x40>)
 800036a:	2600      	movs	r6, #0
 800036c:	4c0b      	ldr	r4, [pc, #44]	@ (800039c <__libc_init_array+0x44>)
 800036e:	f000 f817 	bl	80003a0 <_init>
 8000372:	1b64      	subs	r4, r4, r5
 8000374:	10a4      	asrs	r4, r4, #2
 8000376:	42a6      	cmp	r6, r4
 8000378:	d105      	bne.n	8000386 <__libc_init_array+0x2e>
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000380:	3601      	adds	r6, #1
 8000382:	4798      	blx	r3
 8000384:	e7ee      	b.n	8000364 <__libc_init_array+0xc>
 8000386:	f855 3b04 	ldr.w	r3, [r5], #4
 800038a:	3601      	adds	r6, #1
 800038c:	4798      	blx	r3
 800038e:	e7f2      	b.n	8000376 <__libc_init_array+0x1e>
 8000390:	080003b8 	.word	0x080003b8
 8000394:	080003b8 	.word	0x080003b8
 8000398:	080003b8 	.word	0x080003b8
 800039c:	080003bc 	.word	0x080003bc

080003a0 <_init>:
 80003a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a2:	bf00      	nop
 80003a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a6:	bc08      	pop	{r3}
 80003a8:	469e      	mov	lr, r3
 80003aa:	4770      	bx	lr

080003ac <_fini>:
 80003ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ae:	bf00      	nop
 80003b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b2:	bc08      	pop	{r3}
 80003b4:	469e      	mov	lr, r3
 80003b6:	4770      	bx	lr
